<launch>



    <!-- use something like set_workcell:=0 (to disable setting a workcell using this launch script), or specify a specific workcell using workcell_path:=/path/to/the/workcell on the roslaunch commandline -->
  <arg name="set_workcell" default="true" />
  
  <!--<group if="$(arg set_workcell)">
    <arg name="workcell_path" default="$(env RW_ROOT)/example/ModelData/XMLScenes/RobotOnTable/Scene.xml" />
    <param name="/caros/workcell" value="$(arg workcell_path)" />
  </group>-->
  
  <group if="$(arg set_workcell)">
    <arg name="workcell_path" default="/home/rovi2/Jesper/UR5/Mini-Picker/Mini-Picker_v2_DHJoints.wc.xml" />
    <param name="/caros/workcell" value="$(arg workcell_path)" />
  </group>

  <!-- argument parameter to switch between simulation and workcell node
  mode:= simulator -> simulation
  mode:=cell3 -> connect to cell3 
        -->
  
  <include  file="$(find caros_universalrobot)/launch/caros_universalrobot_param.xml" ns="caros_universalrobot"  >
    <arg name="device_name" value="UR5" />
<!--       <arg name="device_name" value="UR-6-85-5-A" /> -->
  </include>
  
<!--   ns="caros_universalrobot" -->
  
  <!-- The 'name' parameter has to match the 'ns' parameter used in the include tag above -->
  <node pkg="caros_universalrobot" type="caros_universalrobot_node" name="caros_universalrobot" required="true"  >
  </node>
  
  
  <node pkg="mp_mini_picker" type="mp_mini_picker_node" name="mp_mini_picker" required="true" output="screen" >
  </node>


   <!-- Determine this using rosrun pointgrey_camera_driver list_cameras.
       If not specified, defaults to first camera found. -->
  <arg name="camera_name" default="camera" />
  <arg name="camera_serial" default="0" />
  <arg name="calibrated" default="0" />

  <group ns="$(arg camera_name)">
    <node pkg="nodelet" type="nodelet" name="camera_nodelet_manager" args="manager" />

    <node pkg="nodelet" type="nodelet" name="camera_nodelet"
          args="load pointgrey_camera_driver/PointGreyCameraNodelet camera_nodelet_manager" >
      <param name="frame_id" value="camera" />
      <param name="serial" value="$(arg camera_serial)" />

      <!-- When unspecified, the driver will use the default framerate as given by the
           camera itself. Use this parameter to override that value for cameras capable of
           other framerates. -->
      <!-- <param name="frame_rate" value="15" /> -->

      <!-- Use the camera_calibration package to create this file -->
      <param name="camera_info_url" if="$(arg calibrated)"
             value="file://$(env HOME)/.ros/camera_info/$(arg camera_serial).yaml" />
    </node>

    <node pkg="nodelet" type="nodelet" name="image_proc_debayer"
          args="load image_proc/debayer camera_nodelet_manager">
    </node>
  </group>

<!--    <node pkg="mp_mini_picker" type="mp_mini_picker_node" name="mp_mini_picker" required="true" output="screen" > </node> -->
   <node name = "camera_handling" pkg = "aruco_3D" type = "aruco_3D_node" respawn = "true" output = "screen" args = "2"/>
   
   
   
   <node name = "matching_points" pkg = "match_points" type = "match_points_node" respawn = "true" output = "screen" args = ""/>
   
   <node name = "testing_transformation_matrix_woop" pkg = "testing_transformation_matrix" type = "testing_transformation_matrix_node" respawn = "true" output = "screen" args = ""/>
   
   <node name = "woow" pkg = "kalman_filter" type = "kalman_filter_node1" respawn = "true" output = "screen" args = "1"/>
   
   <node name = "woow2" pkg = "kalman_filter" type = "kalman_filter_node2" respawn = "true" output = "screen" args = "1"/>
    
    <node name = "fixed_frame" pkg = "tf" type = "static_transform_publisher" respawn = "true" output = "screen" args = "0 0 0 0 0 0 1 map world 10"/>
    
    <node name = "visualisering" pkg = "rviz" type = "rviz" respawn = "false" output = "screen" args = ""/>
</launch>